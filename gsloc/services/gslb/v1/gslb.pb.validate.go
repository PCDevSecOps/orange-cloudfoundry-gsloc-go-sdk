// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gsloc/services/gslb/v1/gslb.proto

package gslbsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetEntryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEntryRequestMultiError, or nil if none found.
func (m *SetEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := SetEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetHealthcheck() == nil {
		err := SetEntryRequestValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEntryRequestValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEntryRequestMultiError(errors)
	}

	return nil
}

// SetEntryRequestMultiError is an error wrapping multiple validation errors
// returned by SetEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type SetEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEntryRequestMultiError) AllErrors() []error { return m }

// SetEntryRequestValidationError is the validation error returned by
// SetEntryRequest.Validate if the designated constraints aren't met.
type SetEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEntryRequestValidationError) ErrorName() string { return "SetEntryRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEntryRequestValidationError{}

// Validate checks the field values on DeleteEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntryRequestMultiError, or nil if none found.
func (m *DeleteEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := DeleteEntryRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEntryRequestMultiError(errors)
	}

	return nil
}

// DeleteEntryRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntryRequestMultiError) AllErrors() []error { return m }

// DeleteEntryRequestValidationError is the validation error returned by
// DeleteEntryRequest.Validate if the designated constraints aren't met.
type DeleteEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntryRequestValidationError) ErrorName() string {
	return "DeleteEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntryRequestValidationError{}

// Validate checks the field values on GetEntryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryRequestMultiError, or nil if none found.
func (m *GetEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetEntryRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEntryRequestMultiError(errors)
	}

	return nil
}

// GetEntryRequestMultiError is an error wrapping multiple validation errors
// returned by GetEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryRequestMultiError) AllErrors() []error { return m }

// GetEntryRequestValidationError is the validation error returned by
// GetEntryRequest.Validate if the designated constraints aren't met.
type GetEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryRequestValidationError) ErrorName() string { return "GetEntryRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryRequestValidationError{}

// Validate checks the field values on GetEntryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryResponseMultiError, or nil if none found.
func (m *GetEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := GetEntryResponseValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetHealthcheck() == nil {
		err := GetEntryResponseValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEntryResponseValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEntryResponseMultiError(errors)
	}

	return nil
}

// GetEntryResponseMultiError is an error wrapping multiple validation errors
// returned by GetEntryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryResponseMultiError) AllErrors() []error { return m }

// GetEntryResponseValidationError is the validation error returned by
// GetEntryResponse.Validate if the designated constraints aren't met.
type GetEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryResponseValidationError) ErrorName() string { return "GetEntryResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryResponseValidationError{}

// Validate checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesRequestMultiError, or nil if none found.
func (m *ListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListEntriesRequestMultiError(errors)
	}

	return nil
}

// ListEntriesRequestMultiError is an error wrapping multiple validation errors
// returned by ListEntriesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesRequestMultiError) AllErrors() []error { return m }

// ListEntriesRequestValidationError is the validation error returned by
// ListEntriesRequest.Validate if the designated constraints aren't met.
type ListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesRequestValidationError) ErrorName() string {
	return "ListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesRequestValidationError{}

// Validate checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesResponseMultiError, or nil if none found.
func (m *ListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntriesResponseMultiError(errors)
	}

	return nil
}

// ListEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesResponseMultiError) AllErrors() []error { return m }

// ListEntriesResponseValidationError is the validation error returned by
// ListEntriesResponse.Validate if the designated constraints aren't met.
type ListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesResponseValidationError) ErrorName() string {
	return "ListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesResponseValidationError{}

// Validate checks the field values on AddMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMemberRequestMultiError, or nil if none found.
func (m *AddMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := AddMemberRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMember() == nil {
		err := AddMemberRequestValidationError{
			field:  "Member",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMemberRequestValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddMemberRequestMultiError(errors)
	}

	return nil
}

// AddMemberRequestMultiError is an error wrapping multiple validation errors
// returned by AddMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMemberRequestMultiError) AllErrors() []error { return m }

// AddMemberRequestValidationError is the validation error returned by
// AddMemberRequest.Validate if the designated constraints aren't met.
type AddMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberRequestValidationError) ErrorName() string { return "AddMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := DeleteMemberRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := DeleteMemberRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on SetMemberStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMemberStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMemberStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMemberStatusRequestMultiError, or nil if none found.
func (m *SetMemberStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMemberStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := SetMemberStatusRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := SetMemberStatusRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return SetMemberStatusRequestMultiError(errors)
	}

	return nil
}

// SetMemberStatusRequestMultiError is an error wrapping multiple validation
// errors returned by SetMemberStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMemberStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMemberStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMemberStatusRequestMultiError) AllErrors() []error { return m }

// SetMemberStatusRequestValidationError is the validation error returned by
// SetMemberStatusRequest.Validate if the designated constraints aren't met.
type SetMemberStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMemberStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMemberStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMemberStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMemberStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMemberStatusRequestValidationError) ErrorName() string {
	return "SetMemberStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMemberStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMemberStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMemberStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMemberStatusRequestValidationError{}

// Validate checks the field values on SetMembersStatusByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMembersStatusByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMembersStatusByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetMembersStatusByFilterRequestMultiError, or nil if none found.
func (m *SetMembersStatusByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMembersStatusByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	// no validation rules for Dc

	// no validation rules for Status

	if len(errors) > 0 {
		return SetMembersStatusByFilterRequestMultiError(errors)
	}

	return nil
}

// SetMembersStatusByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by SetMembersStatusByFilterRequest.ValidateAll()
// if the designated constraints aren't met.
type SetMembersStatusByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMembersStatusByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMembersStatusByFilterRequestMultiError) AllErrors() []error { return m }

// SetMembersStatusByFilterRequestValidationError is the validation error
// returned by SetMembersStatusByFilterRequest.Validate if the designated
// constraints aren't met.
type SetMembersStatusByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMembersStatusByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMembersStatusByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMembersStatusByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMembersStatusByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMembersStatusByFilterRequestValidationError) ErrorName() string {
	return "SetMembersStatusByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMembersStatusByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMembersStatusByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMembersStatusByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMembersStatusByFilterRequestValidationError{}

// Validate checks the field values on SetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetHealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetHealthCheckRequestMultiError, or nil if none found.
func (m *SetHealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetHealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := SetHealthCheckRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHealthcheck() == nil {
		err := SetHealthCheckRequestValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetHealthCheckRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetHealthCheckRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetHealthCheckRequestValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetHealthCheckRequestMultiError(errors)
	}

	return nil
}

// SetHealthCheckRequestMultiError is an error wrapping multiple validation
// errors returned by SetHealthCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type SetHealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetHealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetHealthCheckRequestMultiError) AllErrors() []error { return m }

// SetHealthCheckRequestValidationError is the validation error returned by
// SetHealthCheckRequest.Validate if the designated constraints aren't met.
type SetHealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHealthCheckRequestValidationError) ErrorName() string {
	return "SetHealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetHealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHealthCheckRequestValidationError{}

// Validate checks the field values on ListDcsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDcsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDcsRequestMultiError,
// or nil if none found.
func (m *ListDcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDcsRequestMultiError(errors)
	}

	return nil
}

// ListDcsRequestMultiError is an error wrapping multiple validation errors
// returned by ListDcsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDcsRequestMultiError) AllErrors() []error { return m }

// ListDcsRequestValidationError is the validation error returned by
// ListDcsRequest.Validate if the designated constraints aren't met.
type ListDcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDcsRequestValidationError) ErrorName() string { return "ListDcsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDcsRequestValidationError{}

// Validate checks the field values on ListDcsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDcsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDcsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDcsResponseMultiError, or nil if none found.
func (m *ListDcsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDcsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDcsResponseMultiError(errors)
	}

	return nil
}

// ListDcsResponseMultiError is an error wrapping multiple validation errors
// returned by ListDcsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDcsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDcsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDcsResponseMultiError) AllErrors() []error { return m }

// ListDcsResponseValidationError is the validation error returned by
// ListDcsResponse.Validate if the designated constraints aren't met.
type ListDcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDcsResponseValidationError) ErrorName() string { return "ListDcsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDcsResponseValidationError{}
