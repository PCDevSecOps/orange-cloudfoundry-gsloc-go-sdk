// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gsloc/services/gslb/v1/gslb.proto

package gslbsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetEntryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetEntryRequestMultiError, or nil if none found.
func (m *SetEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := SetEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetHealthcheck() == nil {
		err := SetEntryRequestValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetEntryRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetEntryRequestValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetEntryRequestMultiError(errors)
	}

	return nil
}

// SetEntryRequestMultiError is an error wrapping multiple validation errors
// returned by SetEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type SetEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetEntryRequestMultiError) AllErrors() []error { return m }

// SetEntryRequestValidationError is the validation error returned by
// SetEntryRequest.Validate if the designated constraints aren't met.
type SetEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetEntryRequestValidationError) ErrorName() string { return "SetEntryRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetEntryRequestValidationError{}

// Validate checks the field values on DeleteEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntryRequestMultiError, or nil if none found.
func (m *DeleteEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := DeleteEntryRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEntryRequestMultiError(errors)
	}

	return nil
}

// DeleteEntryRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntryRequestMultiError) AllErrors() []error { return m }

// DeleteEntryRequestValidationError is the validation error returned by
// DeleteEntryRequest.Validate if the designated constraints aren't met.
type DeleteEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntryRequestValidationError) ErrorName() string {
	return "DeleteEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntryRequestValidationError{}

// Validate checks the field values on GetEntryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryRequestMultiError, or nil if none found.
func (m *GetEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetEntryRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEntryRequestMultiError(errors)
	}

	return nil
}

// GetEntryRequestMultiError is an error wrapping multiple validation errors
// returned by GetEntryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryRequestMultiError) AllErrors() []error { return m }

// GetEntryRequestValidationError is the validation error returned by
// GetEntryRequest.Validate if the designated constraints aren't met.
type GetEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryRequestValidationError) ErrorName() string { return "GetEntryRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryRequestValidationError{}

// Validate checks the field values on GetEntryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryResponseMultiError, or nil if none found.
func (m *GetEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := GetEntryResponseValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetHealthcheck() == nil {
		err := GetEntryResponseValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEntryResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEntryResponseValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEntryResponseMultiError(errors)
	}

	return nil
}

// GetEntryResponseMultiError is an error wrapping multiple validation errors
// returned by GetEntryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryResponseMultiError) AllErrors() []error { return m }

// GetEntryResponseValidationError is the validation error returned by
// GetEntryResponse.Validate if the designated constraints aren't met.
type GetEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryResponseValidationError) ErrorName() string { return "GetEntryResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryResponseValidationError{}

// Validate checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesRequestMultiError, or nil if none found.
func (m *ListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListEntriesRequestMultiError(errors)
	}

	return nil
}

// ListEntriesRequestMultiError is an error wrapping multiple validation errors
// returned by ListEntriesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesRequestMultiError) AllErrors() []error { return m }

// ListEntriesRequestValidationError is the validation error returned by
// ListEntriesRequest.Validate if the designated constraints aren't met.
type ListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesRequestValidationError) ErrorName() string {
	return "ListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesRequestValidationError{}

// Validate checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesResponseMultiError, or nil if none found.
func (m *ListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntriesResponseMultiError(errors)
	}

	return nil
}

// ListEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesResponseMultiError) AllErrors() []error { return m }

// ListEntriesResponseValidationError is the validation error returned by
// ListEntriesResponse.Validate if the designated constraints aren't met.
type ListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesResponseValidationError) ErrorName() string {
	return "ListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesResponseValidationError{}

// Validate checks the field values on SetMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMemberRequestMultiError, or nil if none found.
func (m *SetMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := SetMemberRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMember() == nil {
		err := SetMemberRequestValidationError{
			field:  "Member",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMemberRequestValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMemberRequestMultiError(errors)
	}

	return nil
}

// SetMemberRequestMultiError is an error wrapping multiple validation errors
// returned by SetMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type SetMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMemberRequestMultiError) AllErrors() []error { return m }

// SetMemberRequestValidationError is the validation error returned by
// SetMemberRequest.Validate if the designated constraints aren't met.
type SetMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMemberRequestValidationError) ErrorName() string { return "SetMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := DeleteMemberRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := DeleteMemberRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on SetMembersStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMembersStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMembersStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMembersStatusRequestMultiError, or nil if none found.
func (m *SetMembersStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMembersStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	// no validation rules for Ip

	// no validation rules for Dc

	// no validation rules for Status

	// no validation rules for DryRun

	if len(errors) > 0 {
		return SetMembersStatusRequestMultiError(errors)
	}

	return nil
}

// SetMembersStatusRequestMultiError is an error wrapping multiple validation
// errors returned by SetMembersStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMembersStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMembersStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMembersStatusRequestMultiError) AllErrors() []error { return m }

// SetMembersStatusRequestValidationError is the validation error returned by
// SetMembersStatusRequest.Validate if the designated constraints aren't met.
type SetMembersStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMembersStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMembersStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMembersStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMembersStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMembersStatusRequestValidationError) ErrorName() string {
	return "SetMembersStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMembersStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMembersStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMembersStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMembersStatusRequestValidationError{}

// Validate checks the field values on SetMembersStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMembersStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMembersStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMembersStatusResponseMultiError, or nil if none found.
func (m *SetMembersStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMembersStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUpdated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetMembersStatusResponseValidationError{
						field:  fmt.Sprintf("Updated[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetMembersStatusResponseValidationError{
						field:  fmt.Sprintf("Updated[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetMembersStatusResponseValidationError{
					field:  fmt.Sprintf("Updated[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetMembersStatusResponseMultiError(errors)
	}

	return nil
}

// SetMembersStatusResponseMultiError is an error wrapping multiple validation
// errors returned by SetMembersStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type SetMembersStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMembersStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMembersStatusResponseMultiError) AllErrors() []error { return m }

// SetMembersStatusResponseValidationError is the validation error returned by
// SetMembersStatusResponse.Validate if the designated constraints aren't met.
type SetMembersStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMembersStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMembersStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMembersStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMembersStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMembersStatusResponseValidationError) ErrorName() string {
	return "SetMembersStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMembersStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMembersStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMembersStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMembersStatusResponseValidationError{}

// Validate checks the field values on SetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetHealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetHealthCheckRequestMultiError, or nil if none found.
func (m *SetHealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetHealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := SetHealthCheckRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHealthcheck() == nil {
		err := SetHealthCheckRequestValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetHealthCheckRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetHealthCheckRequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetHealthCheckRequestValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetHealthCheckRequestMultiError(errors)
	}

	return nil
}

// SetHealthCheckRequestMultiError is an error wrapping multiple validation
// errors returned by SetHealthCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type SetHealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetHealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetHealthCheckRequestMultiError) AllErrors() []error { return m }

// SetHealthCheckRequestValidationError is the validation error returned by
// SetHealthCheckRequest.Validate if the designated constraints aren't met.
type SetHealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHealthCheckRequestValidationError) ErrorName() string {
	return "SetHealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetHealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHealthCheckRequestValidationError{}

// Validate checks the field values on ListDcsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDcsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDcsRequestMultiError,
// or nil if none found.
func (m *ListDcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDcsRequestMultiError(errors)
	}

	return nil
}

// ListDcsRequestMultiError is an error wrapping multiple validation errors
// returned by ListDcsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDcsRequestMultiError) AllErrors() []error { return m }

// ListDcsRequestValidationError is the validation error returned by
// ListDcsRequest.Validate if the designated constraints aren't met.
type ListDcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDcsRequestValidationError) ErrorName() string { return "ListDcsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDcsRequestValidationError{}

// Validate checks the field values on ListDcsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDcsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDcsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDcsResponseMultiError, or nil if none found.
func (m *ListDcsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDcsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDcsResponseMultiError(errors)
	}

	return nil
}

// ListDcsResponseMultiError is an error wrapping multiple validation errors
// returned by ListDcsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDcsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDcsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDcsResponseMultiError) AllErrors() []error { return m }

// ListDcsResponseValidationError is the validation error returned by
// ListDcsResponse.Validate if the designated constraints aren't met.
type ListDcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDcsResponseValidationError) ErrorName() string { return "ListDcsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDcsResponseValidationError{}

// Validate checks the field values on MemberStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberStatusMultiError, or
// nil if none found.
func (m *MemberStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := MemberStatusValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDc()) < 1 {
		err := MemberStatusValidationError{
			field:  "Dc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for FailureReason

	if len(errors) > 0 {
		return MemberStatusMultiError(errors)
	}

	return nil
}

// MemberStatusMultiError is an error wrapping multiple validation errors
// returned by MemberStatus.ValidateAll() if the designated constraints aren't met.
type MemberStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberStatusMultiError) AllErrors() []error { return m }

// MemberStatusValidationError is the validation error returned by
// MemberStatus.Validate if the designated constraints aren't met.
type MemberStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberStatusValidationError) ErrorName() string { return "MemberStatusValidationError" }

// Error satisfies the builtin error interface
func (e MemberStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberStatusValidationError{}

// Validate checks the field values on ListEntriesStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesStatusRequestMultiError, or nil if none found.
func (m *ListEntriesStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListEntriesStatusRequestMultiError(errors)
	}

	return nil
}

// ListEntriesStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ListEntriesStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEntriesStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesStatusRequestMultiError) AllErrors() []error { return m }

// ListEntriesStatusRequestValidationError is the validation error returned by
// ListEntriesStatusRequest.Validate if the designated constraints aren't met.
type ListEntriesStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesStatusRequestValidationError) ErrorName() string {
	return "ListEntriesStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesStatusRequestValidationError{}

// Validate checks the field values on ListEntriesStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntriesStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntriesStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntriesStatusResponseMultiError, or nil if none found.
func (m *ListEntriesStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntriesStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntriesStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntriesStatusResponseValidationError{
						field:  fmt.Sprintf("EntriesStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntriesStatusResponseValidationError{
						field:  fmt.Sprintf("EntriesStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntriesStatusResponseValidationError{
					field:  fmt.Sprintf("EntriesStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntriesStatusResponseMultiError(errors)
	}

	return nil
}

// ListEntriesStatusResponseMultiError is an error wrapping multiple validation
// errors returned by ListEntriesStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type ListEntriesStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntriesStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntriesStatusResponseMultiError) AllErrors() []error { return m }

// ListEntriesStatusResponseValidationError is the validation error returned by
// ListEntriesStatusResponse.Validate if the designated constraints aren't met.
type ListEntriesStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntriesStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntriesStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntriesStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntriesStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntriesStatusResponseValidationError) ErrorName() string {
	return "ListEntriesStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntriesStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntriesStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntriesStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntriesStatusResponseValidationError{}

// Validate checks the field values on GetEntryStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntryStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryStatusRequestMultiError, or nil if none found.
func (m *GetEntryStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetEntryStatusRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEntryStatusRequestMultiError(errors)
	}

	return nil
}

// GetEntryStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetEntryStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEntryStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryStatusRequestMultiError) AllErrors() []error { return m }

// GetEntryStatusRequestValidationError is the validation error returned by
// GetEntryStatusRequest.Validate if the designated constraints aren't met.
type GetEntryStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryStatusRequestValidationError) ErrorName() string {
	return "GetEntryStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntryStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryStatusRequestValidationError{}

// Validate checks the field values on GetEntryStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntryStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntryStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntryStatusResponseMultiError, or nil if none found.
func (m *GetEntryStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntryStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetEntryStatusResponseValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMembersIpv4() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntryStatusResponseValidationError{
						field:  fmt.Sprintf("MembersIpv4[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntryStatusResponseValidationError{
						field:  fmt.Sprintf("MembersIpv4[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntryStatusResponseValidationError{
					field:  fmt.Sprintf("MembersIpv4[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembersIpv6() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntryStatusResponseValidationError{
						field:  fmt.Sprintf("MembersIpv6[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntryStatusResponseValidationError{
						field:  fmt.Sprintf("MembersIpv6[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntryStatusResponseValidationError{
					field:  fmt.Sprintf("MembersIpv6[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEntryStatusResponseMultiError(errors)
	}

	return nil
}

// GetEntryStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetEntryStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEntryStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntryStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntryStatusResponseMultiError) AllErrors() []error { return m }

// GetEntryStatusResponseValidationError is the validation error returned by
// GetEntryStatusResponse.Validate if the designated constraints aren't met.
type GetEntryStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntryStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntryStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntryStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntryStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntryStatusResponseValidationError) ErrorName() string {
	return "GetEntryStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntryStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntryStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntryStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntryStatusResponseValidationError{}

// Validate checks the field values on GetMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberRequestMultiError, or nil if none found.
func (m *GetMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetMemberRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := GetMemberRequestValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMemberRequestMultiError(errors)
	}

	return nil
}

// GetMemberRequestMultiError is an error wrapping multiple validation errors
// returned by GetMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberRequestMultiError) AllErrors() []error { return m }

// GetMemberRequestValidationError is the validation error returned by
// GetMemberRequest.Validate if the designated constraints aren't met.
type GetMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberRequestValidationError) ErrorName() string { return "GetMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberRequestValidationError{}

// Validate checks the field values on GetMemberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberResponseMultiError, or nil if none found.
func (m *GetMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMember() == nil {
		err := GetMemberResponseValidationError{
			field:  "Member",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMemberResponseMultiError(errors)
	}

	return nil
}

// GetMemberResponseMultiError is an error wrapping multiple validation errors
// returned by GetMemberResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberResponseMultiError) AllErrors() []error { return m }

// GetMemberResponseValidationError is the validation error returned by
// GetMemberResponse.Validate if the designated constraints aren't met.
type GetMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberResponseValidationError) ErrorName() string {
	return "GetMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberResponseValidationError{}

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := ListMembersRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}

	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembersIpv4() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("MembersIpv4[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("MembersIpv4[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("MembersIpv4[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembersIpv6() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("MembersIpv6[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("MembersIpv6[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("MembersIpv6[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}

	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on GetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthCheckRequestMultiError, or nil if none found.
func (m *GetHealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := GetHealthCheckRequestValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetHealthCheckRequestMultiError(errors)
	}

	return nil
}

// GetHealthCheckRequestMultiError is an error wrapping multiple validation
// errors returned by GetHealthCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type GetHealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthCheckRequestMultiError) AllErrors() []error { return m }

// GetHealthCheckRequestValidationError is the validation error returned by
// GetHealthCheckRequest.Validate if the designated constraints aren't met.
type GetHealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthCheckRequestValidationError) ErrorName() string {
	return "GetHealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthCheckRequestValidationError{}

// Validate checks the field values on GetHealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHealthCheckResponseMultiError, or nil if none found.
func (m *GetHealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetHealthcheck() == nil {
		err := GetHealthCheckResponseValidationError{
			field:  "Healthcheck",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthcheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHealthCheckResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHealthCheckResponseValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHealthCheckResponseValidationError{
				field:  "Healthcheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHealthCheckResponseMultiError(errors)
	}

	return nil
}

// GetHealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by GetHealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type GetHealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHealthCheckResponseMultiError) AllErrors() []error { return m }

// GetHealthCheckResponseValidationError is the validation error returned by
// GetHealthCheckResponse.Validate if the designated constraints aren't met.
type GetHealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHealthCheckResponseValidationError) ErrorName() string {
	return "GetHealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHealthCheckResponseValidationError{}

// Validate checks the field values on PluginHealthCheckInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PluginHealthCheckInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginHealthCheckInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PluginHealthCheckInfoMultiError, or nil if none found.
func (m *PluginHealthCheckInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginHealthCheckInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return PluginHealthCheckInfoMultiError(errors)
	}

	return nil
}

// PluginHealthCheckInfoMultiError is an error wrapping multiple validation
// errors returned by PluginHealthCheckInfo.ValidateAll() if the designated
// constraints aren't met.
type PluginHealthCheckInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginHealthCheckInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginHealthCheckInfoMultiError) AllErrors() []error { return m }

// PluginHealthCheckInfoValidationError is the validation error returned by
// PluginHealthCheckInfo.Validate if the designated constraints aren't met.
type PluginHealthCheckInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginHealthCheckInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginHealthCheckInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginHealthCheckInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginHealthCheckInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginHealthCheckInfoValidationError) ErrorName() string {
	return "PluginHealthCheckInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PluginHealthCheckInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginHealthCheckInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginHealthCheckInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginHealthCheckInfoValidationError{}

// Validate checks the field values on ListPluginHealthChecksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPluginHealthChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPluginHealthChecksResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPluginHealthChecksResponseMultiError, or nil if none found.
func (m *ListPluginHealthChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPluginHealthChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPluginHealthChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPluginHealthChecksResponseValidationError{
						field:  fmt.Sprintf("PluginHealthChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPluginHealthChecksResponseValidationError{
						field:  fmt.Sprintf("PluginHealthChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPluginHealthChecksResponseValidationError{
					field:  fmt.Sprintf("PluginHealthChecks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPluginHealthChecksResponseMultiError(errors)
	}

	return nil
}

// ListPluginHealthChecksResponseMultiError is an error wrapping multiple
// validation errors returned by ListPluginHealthChecksResponse.ValidateAll()
// if the designated constraints aren't met.
type ListPluginHealthChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPluginHealthChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPluginHealthChecksResponseMultiError) AllErrors() []error { return m }

// ListPluginHealthChecksResponseValidationError is the validation error
// returned by ListPluginHealthChecksResponse.Validate if the designated
// constraints aren't met.
type ListPluginHealthChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPluginHealthChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPluginHealthChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPluginHealthChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPluginHealthChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPluginHealthChecksResponseValidationError) ErrorName() string {
	return "ListPluginHealthChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPluginHealthChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPluginHealthChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPluginHealthChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPluginHealthChecksResponseValidationError{}

// Validate checks the field values on SetMembersStatusResponse_Info with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMembersStatusResponse_Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMembersStatusResponse_Info with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetMembersStatusResponse_InfoMultiError, or nil if none found.
func (m *SetMembersStatusResponse_Info) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMembersStatusResponse_Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFqdn()) < 1 {
		err := SetMembersStatusResponse_InfoValidationError{
			field:  "Fqdn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetMembersStatusResponse_InfoMultiError(errors)
	}

	return nil
}

// SetMembersStatusResponse_InfoMultiError is an error wrapping multiple
// validation errors returned by SetMembersStatusResponse_Info.ValidateAll()
// if the designated constraints aren't met.
type SetMembersStatusResponse_InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMembersStatusResponse_InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMembersStatusResponse_InfoMultiError) AllErrors() []error { return m }

// SetMembersStatusResponse_InfoValidationError is the validation error
// returned by SetMembersStatusResponse_Info.Validate if the designated
// constraints aren't met.
type SetMembersStatusResponse_InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMembersStatusResponse_InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMembersStatusResponse_InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMembersStatusResponse_InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMembersStatusResponse_InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMembersStatusResponse_InfoValidationError) ErrorName() string {
	return "SetMembersStatusResponse_InfoValidationError"
}

// Error satisfies the builtin error interface
func (e SetMembersStatusResponse_InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMembersStatusResponse_Info.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMembersStatusResponse_InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMembersStatusResponse_InfoValidationError{}
