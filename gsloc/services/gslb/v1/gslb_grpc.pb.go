// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gsloc/services/gslb/v1/gslb.proto

package gslbsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GSLB_SetEntry_FullMethodName         = "/gsloc.services.gslb.v1.GSLB/SetEntry"
	GSLB_DeleteEntry_FullMethodName      = "/gsloc.services.gslb.v1.GSLB/DeleteEntry"
	GSLB_GetEntry_FullMethodName         = "/gsloc.services.gslb.v1.GSLB/GetEntry"
	GSLB_ListEntries_FullMethodName      = "/gsloc.services.gslb.v1.GSLB/ListEntries"
	GSLB_GetEntryStatus_FullMethodName   = "/gsloc.services.gslb.v1.GSLB/GetEntryStatus"
	GSLB_SetMember_FullMethodName        = "/gsloc.services.gslb.v1.GSLB/SetMember"
	GSLB_DeleteMember_FullMethodName     = "/gsloc.services.gslb.v1.GSLB/DeleteMember"
	GSLB_GetMember_FullMethodName        = "/gsloc.services.gslb.v1.GSLB/GetMember"
	GSLB_ListMembers_FullMethodName      = "/gsloc.services.gslb.v1.GSLB/ListMembers"
	GSLB_SetMembersStatus_FullMethodName = "/gsloc.services.gslb.v1.GSLB/SetMembersStatus"
	GSLB_GetHealthCheck_FullMethodName   = "/gsloc.services.gslb.v1.GSLB/GetHealthCheck"
	GSLB_SetHealthCheck_FullMethodName   = "/gsloc.services.gslb.v1.GSLB/SetHealthCheck"
	GSLB_ListDcs_FullMethodName          = "/gsloc.services.gslb.v1.GSLB/ListDcs"
)

// GSLBClient is the client API for GSLB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GSLBClient interface {
	SetEntry(ctx context.Context, in *SetEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	GetEntryStatus(ctx context.Context, in *GetEntryStatusRequest, opts ...grpc.CallOption) (*GetEntryStatusResponse, error)
	SetMember(ctx context.Context, in *SetMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	SetMembersStatus(ctx context.Context, in *SetMembersStatusRequest, opts ...grpc.CallOption) (*SetMembersStatusResponse, error)
	GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*GetHealthCheckResponse, error)
	SetHealthCheck(ctx context.Context, in *SetHealthCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDcs(ctx context.Context, in *ListDcsRequest, opts ...grpc.CallOption) (*ListDcsResponse, error)
}

type gSLBClient struct {
	cc grpc.ClientConnInterface
}

func NewGSLBClient(cc grpc.ClientConnInterface) GSLBClient {
	return &gSLBClient{cc}
}

func (c *gSLBClient) SetEntry(ctx context.Context, in *SetEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GSLB_SetEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GSLB_DeleteEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, GSLB_GetEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, GSLB_ListEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) GetEntryStatus(ctx context.Context, in *GetEntryStatusRequest, opts ...grpc.CallOption) (*GetEntryStatusResponse, error) {
	out := new(GetEntryStatusResponse)
	err := c.cc.Invoke(ctx, GSLB_GetEntryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) SetMember(ctx context.Context, in *SetMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GSLB_SetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GSLB_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, GSLB_GetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, GSLB_ListMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) SetMembersStatus(ctx context.Context, in *SetMembersStatusRequest, opts ...grpc.CallOption) (*SetMembersStatusResponse, error) {
	out := new(SetMembersStatusResponse)
	err := c.cc.Invoke(ctx, GSLB_SetMembersStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*GetHealthCheckResponse, error) {
	out := new(GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, GSLB_GetHealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) SetHealthCheck(ctx context.Context, in *SetHealthCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GSLB_SetHealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSLBClient) ListDcs(ctx context.Context, in *ListDcsRequest, opts ...grpc.CallOption) (*ListDcsResponse, error) {
	out := new(ListDcsResponse)
	err := c.cc.Invoke(ctx, GSLB_ListDcs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSLBServer is the server API for GSLB service.
// All implementations must embed UnimplementedGSLBServer
// for forward compatibility
type GSLBServer interface {
	SetEntry(context.Context, *SetEntryRequest) (*emptypb.Empty, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*emptypb.Empty, error)
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	GetEntryStatus(context.Context, *GetEntryStatusRequest) (*GetEntryStatusResponse, error)
	SetMember(context.Context, *SetMemberRequest) (*emptypb.Empty, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	SetMembersStatus(context.Context, *SetMembersStatusRequest) (*SetMembersStatusResponse, error)
	GetHealthCheck(context.Context, *GetHealthCheckRequest) (*GetHealthCheckResponse, error)
	SetHealthCheck(context.Context, *SetHealthCheckRequest) (*emptypb.Empty, error)
	ListDcs(context.Context, *ListDcsRequest) (*ListDcsResponse, error)
	mustEmbedUnimplementedGSLBServer()
}

// UnimplementedGSLBServer must be embedded to have forward compatible implementations.
type UnimplementedGSLBServer struct {
}

func (UnimplementedGSLBServer) SetEntry(context.Context, *SetEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntry not implemented")
}
func (UnimplementedGSLBServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedGSLBServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedGSLBServer) ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedGSLBServer) GetEntryStatus(context.Context, *GetEntryStatusRequest) (*GetEntryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryStatus not implemented")
}
func (UnimplementedGSLBServer) SetMember(context.Context, *SetMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMember not implemented")
}
func (UnimplementedGSLBServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedGSLBServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedGSLBServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedGSLBServer) SetMembersStatus(context.Context, *SetMembersStatusRequest) (*SetMembersStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMembersStatus not implemented")
}
func (UnimplementedGSLBServer) GetHealthCheck(context.Context, *GetHealthCheckRequest) (*GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthCheck not implemented")
}
func (UnimplementedGSLBServer) SetHealthCheck(context.Context, *SetHealthCheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHealthCheck not implemented")
}
func (UnimplementedGSLBServer) ListDcs(context.Context, *ListDcsRequest) (*ListDcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDcs not implemented")
}
func (UnimplementedGSLBServer) mustEmbedUnimplementedGSLBServer() {}

// UnsafeGSLBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSLBServer will
// result in compilation errors.
type UnsafeGSLBServer interface {
	mustEmbedUnimplementedGSLBServer()
}

func RegisterGSLBServer(s grpc.ServiceRegistrar, srv GSLBServer) {
	s.RegisterService(&GSLB_ServiceDesc, srv)
}

func _GSLB_SetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).SetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_SetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).SetEntry(ctx, req.(*SetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_DeleteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_GetEntryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).GetEntryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_GetEntryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).GetEntryStatus(ctx, req.(*GetEntryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_SetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).SetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_SetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).SetMember(ctx, req.(*SetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_SetMembersStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMembersStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).SetMembersStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_SetMembersStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).SetMembersStatus(ctx, req.(*SetMembersStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_GetHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).GetHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_GetHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).GetHealthCheck(ctx, req.(*GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_SetHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).SetHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_SetHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).SetHealthCheck(ctx, req.(*SetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSLB_ListDcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSLBServer).ListDcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSLB_ListDcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSLBServer).ListDcs(ctx, req.(*ListDcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GSLB_ServiceDesc is the grpc.ServiceDesc for GSLB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSLB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsloc.services.gslb.v1.GSLB",
	HandlerType: (*GSLBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetEntry",
			Handler:    _GSLB_SetEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _GSLB_DeleteEntry_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _GSLB_GetEntry_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _GSLB_ListEntries_Handler,
		},
		{
			MethodName: "GetEntryStatus",
			Handler:    _GSLB_GetEntryStatus_Handler,
		},
		{
			MethodName: "SetMember",
			Handler:    _GSLB_SetMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _GSLB_DeleteMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _GSLB_GetMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _GSLB_ListMembers_Handler,
		},
		{
			MethodName: "SetMembersStatus",
			Handler:    _GSLB_SetMembersStatus_Handler,
		},
		{
			MethodName: "GetHealthCheck",
			Handler:    _GSLB_GetHealthCheck_Handler,
		},
		{
			MethodName: "SetHealthCheck",
			Handler:    _GSLB_SetHealthCheck_Handler,
		},
		{
			MethodName: "ListDcs",
			Handler:    _GSLB_ListDcs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gsloc/services/gslb/v1/gslb.proto",
}
